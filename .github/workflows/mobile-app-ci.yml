name: Mobile App CI

on:
  push:
    branches: [ main, develop ]
    paths: [ 'mobile-app/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'mobile-app/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'mobile-app/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd mobile-app
        npm ci
    
    - name: Lint code
      run: |
        cd mobile-app
        npm run lint
    
    - name: Type check
      run: |
        cd mobile-app
        npx tsc --noEmit
    
    - name: Run tests
      run: |
        cd mobile-app
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./mobile-app/coverage
        flags: mobile-app
        name: mobile-app-coverage
        fail_ci_if_error: false

  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'mobile-app/package-lock.json'
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Install dependencies
      run: |
        cd mobile-app
        npm ci
    
    - name: Build Android APK
      run: |
        cd mobile-app
        npx expo prebuild --platform android
        cd android
        ./gradlew assembleRelease
    
    - name: Upload Android APK
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: mobile-app/android/app/build/outputs/apk/release/
        retention-days: 30

  build-ios:
    needs: test
    runs-on: macos-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'mobile-app/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd mobile-app
        npm ci
    
    - name: Setup iOS
      run: |
        cd mobile-app
        npx expo prebuild --platform ios
    
    - name: Build iOS app
      run: |
        cd mobile-app/ios
        xcodebuild -workspace PhunParty.xcworkspace -scheme PhunParty -configuration Release -destination generic/platform=iOS -archivePath PhunParty.xcarchive archive
    
    - name: Upload iOS build
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: mobile-app/ios/PhunParty.xcarchive
        retention-days: 30

  deploy-staging:
    needs: [test, build-android]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploy mobile app to staging (TestFlight/Play Console Internal Testing)"
        # Add your staging deployment commands here

  deploy-production:
    needs: [test, build-android, build-ios]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploy mobile app to production app stores"
        # Add your production deployment commands here
