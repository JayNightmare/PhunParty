name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        echo "## Changes" > CHANGELOG.md
        if [ -n "$(git tag --sort=-version:refname | head -n 2 | tail -n 1)" ]; then
          PREV_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
          git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md
        else
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: Release ${{ github.event.inputs.version || github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

  build-and-upload-backend:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Build backend package
      run: |
        cd phunparty-backend
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Create backend archive
      run: |
        cd phunparty-backend
        tar -czf ../phunparty-backend-${{ github.event.inputs.version || github.ref_name }}.tar.gz .
    
    - name: Upload backend archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./phunparty-backend-${{ github.event.inputs.version || github.ref_name }}.tar.gz
        asset_name: phunparty-backend-${{ github.event.inputs.version || github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  build-and-upload-web:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Check if web project exists
      id: check-web
      run: |
        if [ -d "web-host-ui" ] && [ -f "web-host-ui/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build web application
      if: steps.check-web.outputs.exists == 'true'
      run: |
        cd web-host-ui
        npm ci
        npm run build
        tar -czf ../phunparty-web-${{ github.event.inputs.version || github.ref_name }}.tar.gz build/
    
    - name: Upload web build
      if: steps.check-web.outputs.exists == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./phunparty-web-${{ github.event.inputs.version || github.ref_name }}.tar.gz
        asset_name: phunparty-web-${{ github.event.inputs.version || github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  build-mobile-android:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Check if mobile project exists
      id: check-mobile
      run: |
        if [ -d "mobile-app" ] && [ -f "mobile-app/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build Android APK
      if: steps.check-mobile.outputs.exists == 'true'
      run: |
        cd mobile-app
        npm ci
        npx expo prebuild --platform android
        cd android
        ./gradlew assembleRelease
    
    - name: Upload Android APK
      if: steps.check-mobile.outputs.exists == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mobile-app/android/app/build/outputs/apk/release/app-release.apk
        asset_name: phunparty-android-${{ github.event.inputs.version || github.ref_name }}.apk
        asset_content_type: application/vnd.android.package-archive

  deploy-production:
    needs: [create-release, build-and-upload-backend, build-and-upload-web]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying PhunParty ${{ github.event.inputs.version || github.ref_name }} to production"
        # Add your production deployment commands here
        # This could include:
        # - Deploying backend to production server
        # - Deploying web frontend to hosting platform
        # - Updating production database
        # - Notifying team of successful deployment
    
    - name: Notify deployment success
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `PhunParty ${{ github.event.inputs.version || github.ref_name }} deployed to production`,
            body: `ðŸŽ‰ PhunParty ${{ github.event.inputs.version || github.ref_name }} has been successfully deployed to production!
            
            **Deployment Details:**
            - Backend: âœ… Deployed
            - Web Frontend: âœ… Deployed
            - Release: âœ… Created
            
            **Next Steps:**
            - Monitor application performance
            - Verify all features are working correctly
            - Update documentation if needed`,
            labels: ['deployment', 'production']
          });
